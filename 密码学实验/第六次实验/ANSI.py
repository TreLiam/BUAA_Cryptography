IP = [58, 50, 42, 34, 26, 18, 10,  2,
        60, 52, 44, 36, 28, 20, 12,  4,
        62, 54, 46, 38, 30, 22, 14,  6,
        64, 56, 48, 40, 32, 24, 16,  8,
        57, 49, 41, 33, 25, 17,  9,  1,
        59, 51, 43, 35, 27, 19, 11,  3,
        61, 53, 45, 37, 29, 21, 13,  5,
        63, 55, 47, 39, 31, 23, 15,  7]
IPverse = [40,  8, 48, 16, 56, 24, 64, 32, 39,  7, 47, 15, 55, 23, 63, 31,
            38,  6, 46, 14, 54, 22, 62, 30, 37,  5, 45, 13, 53, 21, 61, 29,
            36,  4, 44, 12, 52, 20, 60, 28, 35,  3, 43, 11, 51, 19, 59, 27,
            34,  2, 42, 10, 50, 18, 58, 26, 33,  1, 41,  9, 49, 17, 57, 25]
keysub1 = [57, 49, 41, 33, 25, 17,  9,  1, 58, 50, 42, 34, 26, 18,
10,  2, 59, 51, 43, 35, 27, 19, 11,  3, 60, 52, 44, 36,
63, 55, 47, 39, 31, 23, 15,  7, 62, 54, 46, 38, 30, 22,
14,  6, 61, 53, 45, 37, 29, 21, 13,  5, 28, 20, 12,  4]
keysub2 = [14, 17, 11, 24,  1,  5,  3, 28, 15,  6, 21, 10,
23, 19, 12,  4, 26,  8, 16,  7, 27, 20, 13,  2,
41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]
keyext = [32,  1,  2,  3,  4,  5,  4,  5,  6,  7,  8,  9,
 8,  9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17,
16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32,  1]
keyleft = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
           ]
PBox = [16,  7, 20, 21, 29, 12, 28, 17,  1, 15, 23, 26,  5, 18, 31, 10,
 2,  8, 24, 14, 32, 27,  3,  9, 19, 13, 30,  6, 22, 11,  4, 25
]
SB1 = [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
]
SB2 = [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
]
SB3 = [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
SB4 = [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
]
SB5 = [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
]
SB6 = [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
]
SB7 = [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
]
SB8 = [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
st1 = [8421888, 32768, 8421378, 2, 512, 8421890, 8389122, 8388608, 514, 8389120, 33280, 8421376, 32770, 8388610, 0, 33282, 0, 8421890, 33282, 32768, 8421888, 512, 8421378, 2, 8389120, 33280, 8421376, 8389122, 8388610, 32770, 514, 8388608, 32768, 2, 8421888, 8388608, 8421378, 33280, 512, 8389122, 8421890, 8421376, 8388610, 33282, 514, 8389120, 32770, 0, 8421890, 8421376, 8388608, 512, 32768, 8388610, 2, 33282, 32770, 8389122, 514, 8421888, 8389120, 0, 33280, 8421378]
st2 = [1074282512, 16384, 524288, 1074266128, 1073741840, 1074282496, 1073758208, 16, 540672, 1073758224, 1073741824, 540688, 524304, 0, 16400, 1074266112, 1073758208, 540688, 16, 1073758224, 1074282512, 1073741824, 524288, 1074266128, 524304, 0, 16384, 1074266112, 1073741840, 540672, 1074282496, 16400, 0, 1074266128, 1073758224, 1074282496, 1074266112, 16, 540688, 16384, 16400, 524288, 524304, 1073741840, 540672, 1073758208, 1073741824, 1074282512, 540688, 524288, 1074266112, 16384, 1073758208, 1074282512, 16, 1073741824, 1074282496, 1073741840, 1073758224, 524304, 0, 16400, 1074266128, 540672]
st3 = [260, 0, 67109120, 65796, 65540, 67108868, 67174660, 67174400, 67108864, 67174656, 65792, 67174404, 67109124, 65536, 4, 256, 67174656, 67174404, 0, 67109120, 67108868, 65536, 65540, 260, 4, 256, 67174400, 65796, 65792, 67109124, 67174660, 67108864, 67174656, 65540, 65536, 67109120, 256, 67174660, 67108868, 0, 67109124, 67108864, 4, 65792, 67174400, 260, 65796, 67174404, 67108864, 260, 67174656, 0, 65540, 67109120, 256, 67174404, 65536, 67174660, 65796, 67108868, 67109124, 67174400, 4, 65792]
st4 = [2151682048, 2147487808, 4198464, 2151677952, 0, 4198400, 2147483712, 4194368, 2147483648, 4194304, 64, 2147487744, 2151678016, 4160, 4096, 2151682112, 2147487808, 64, 2151678016, 2147487744, 4198400, 2151682112, 0, 2151677952, 4096, 2151682048, 4194304, 4160, 2147483648, 4194368, 4198464, 2147483712, 4194368, 4198400, 2147483712, 0, 4160, 2151678016, 2151682048, 2147487808, 2151682112, 2147483648, 2151677952, 4198464, 2147487744, 4194304, 64, 4096, 2151677952, 2151682112, 0, 4198400, 4194368, 2147483648, 2147487808, 64, 2147483712, 4096, 2147487744, 2151678016, 4160, 2151682048, 4194304, 4198464]
st5 = [128, 17039360, 262144, 536870912, 537133184, 16777344, 553648256, 262272, 16777216, 537133056, 536871040, 553910400, 553910272, 0, 17039488, 553648128, 17039488, 553648256, 128, 17039360, 262144, 537133184, 553910272, 536870912, 537133056, 0, 553910400, 16777344, 536871040, 553648128, 16777216, 262272, 262144, 128, 536870912, 553648256, 16777344, 553910272, 537133184, 16777216, 553910400, 553648128, 17039360, 537133056, 262272, 536871040, 0, 17039488, 553648256, 16777216, 17039360, 537133184, 536870912, 17039488, 128, 553910272, 262272, 553910400, 0, 553648128, 16777344, 262144, 537133056, 536871040]
st6= [268435464, 8192, 270532608, 270540808, 268443648, 2097152, 2097160, 268435456, 0, 268443656, 2105344, 8, 270532616, 2105352, 8200, 270540800, 270532608, 270540808, 8, 2097152, 2105352, 268435464, 268443648, 8200, 2097160, 8192, 268443656, 270532616, 0, 270540800, 2105344, 268435456, 268443648, 270532616, 270540808, 8200, 2097152, 268435456, 268435464, 2105344, 2105352, 0, 8, 270532608, 8192, 268443656, 270540800, 2097160, 8, 2105344, 2097152, 268435464, 268443648, 8200, 270540808, 270532608, 270540800, 270532616, 8192, 2105352, 2097160, 0, 268435456, 268443656]
st7 = [1048576, 33555457, 1024, 1049601, 34604033, 0, 1, 34603009, 33555456, 1048577, 33554433, 34604032, 34603008, 1025, 1049600, 33554432, 34603009, 0, 33555457, 34604032, 1048576, 33554433, 33554432, 1025, 1049601, 33555456, 34603008, 1048577, 1024, 34604033, 1, 1049600, 33554432, 1048576, 33555457, 34603009, 1048577, 33555456, 34604032, 1049601, 1025, 34604033, 1049600, 1, 0, 34603008, 33554433, 1024, 1049600, 33555457, 34603009, 1, 33554432, 1048576, 1025, 34604032, 33554433, 34603008, 0, 34604033, 1049601, 1024, 33555456, 1048577]
st8 = [134219808, 131072, 134217728, 32, 131104, 134350880, 134350848, 2048, 134348800, 134219776, 133120, 134348832, 2080, 0, 134217760, 133152, 2048, 134350880, 134219808, 134217728, 134348800, 133120, 133152, 32, 134217760, 2080, 131104, 134350848, 0, 134348832, 134219776, 131072, 133152, 134350848, 32, 2048, 134219776, 134217760, 134348832, 131072, 0, 131104, 134348800, 134219808, 134350880, 133120, 2080, 134217728, 131072, 2048, 134348832, 133152, 32, 134348800, 134217728, 134219808, 134350880, 134217760, 134219776, 0, 133120, 2080, 131104, 134350848]
SB = [SB1,SB2,SB3,SB4,SB5,SB6,SB7,SB8]
st = [st1,st2,st3,st4,st5,st6,st7,st8]
def char_to_int(chr_list):
    num_list = []
    for c in chr_list:
        num_list.append(int(c))
    return num_list
def test(l):
    li = '0x'
    for i in range(0,len(l),4):
        sum = l[i+3] + l[i+2] * 2 + l[i+1] * 4 + l[i] * 8
        if sum == 0:
            li = li +'0'
        elif sum == 1:
            li = li + '1'
        elif sum == 2:
            li = li + '2'
        elif sum == 3:
            li = li + '3'
        elif sum == 4:
            li = li + '4'
        elif sum == 5:
            li = li + '5'
        elif sum == 6:
            li = li + '6'
        elif sum == 7:
            li = li + '7'
        elif sum == 8:
            li = li + '8'
        elif sum == 9:
            li = li + '9'
        elif sum == 10:
            li = li + 'a'
        elif sum == 11:
            li = li + 'b'
        elif sum == 12:
            li = li + 'c'
        elif sum == 13:
            li = li + 'd'
        elif sum == 14:
            li = li + 'e'
        else:
            li = li + 'f'
    print(li)
def XtoB(c):
    if c == '0':
        return [0,0,0,0]
    elif c == '1':
        return [0,0,0,1]
    elif c == '2':
        return [0, 0, 1, 0]
    elif c == '3':
        return [0, 0, 1, 1]
    elif c == '4':
        return [0, 1, 0, 0]
    elif c == '5':
        return [0, 1, 0, 1]
    elif c == '6':
        return [0, 1, 1, 0]
    elif c == '7':
        return [0, 1, 1, 1]
    elif c == '8':
        return [1, 0, 0, 0]
    elif c == '9':
        return [1, 0, 0, 1]
    elif c == 'a':
        return [1, 0, 1, 0]
    elif c == 'b':
        return [1, 0, 1, 1]
    elif c == 'c':
        return [1, 1, 0, 0]
    elif c == 'd':
        return [1, 1, 0, 1]
    elif c == 'e':
        return [1, 1, 1, 0]
    else:
        return [1, 1, 1, 1]
def XtoAnotherB(c):
    if c == 0:
        return [0,0,0,0]
    elif c == 1:
        return [0,0,0,1]
    elif c == 2:
        return [0, 0, 1, 0]
    elif c == 3:
        return [0, 0, 1, 1]
    elif c == 4:
        return [0, 1, 0, 0]
    elif c == 5:
        return [0, 1, 0, 1]
    elif c == 6:
        return [0, 1, 1, 0]
    elif c == 7:
        return [0, 1, 1, 1]
    elif c == 8:
        return [1, 0, 0, 0]
    elif c == 9:
        return [1, 0, 0, 1]
    elif c == 10:
        return [1, 0, 1, 0]
    elif c == 11:
        return [1, 0, 1, 1]
    elif c == 12:
        return [1, 1, 0, 0]
    elif c == 13:
        return [1, 1, 0, 1]
    elif c == 14:
        return [1, 1, 1, 0]
    else:
        return [1, 1, 1, 1]
def trans(k):
    k.pop(0)
    k.pop(0)
    ans = []
    for i in range(len(k)):
        ans = ans + XtoB(k[i])
    return ans
def moveNum(lizz,num):
    ex = []
    for i in range(num):
        ex.append(lizz[i])
    for i in range(num,len(lizz)):
        lizz[i-num] = lizz[i]
    ex.reverse()
    for i in range(num):
        lizz[len(lizz)-i-1] = ex[i]
    return lizz
def generatekey(key):
    keylist = []
    for i in range(56):
        keylist.append(key[keysub1[i]-1]) #置换选择1
    D = []
    C = []
    for i in range(28):
        C.append(keylist[i])
        D.append(keylist[28+i])
    roundkey = []
    for i in range(16):
        roundkey.append([])
        C = moveNum(C,keyleft[i])
        D = moveNum(D,keyleft[i])
        anotherkey = C+D
        for j in range(48):
            roundkey[i].append(anotherkey[keysub2[j]-1])
    return roundkey
def swap(plaintext):
    message = []
    for i in range(len(plaintext)):
        message.append(plaintext[IP[i]-1])
    return message
def Invswap(afterF):
    ciphertext = []
    for i in range(len(afterF)):
        ciphertext.append(afterF[IPverse[i]-1])
    return ciphertext
def extend(right):
    result = []
    for i in range(48):
        result.append(right[keyext[i]-1])
    #test(result)
    return result
def f(m,n):
    mess  = xor(extend(m),n)
    messag = spbox(mess)
    return messag
def xor(a,b):
    result = []
    for i in range(len(a)):
        result.append(a[i]^b[i])
    return result
def spbox(half):
    result = 0
    for i in range(8):
        a = half[6 * i] * 2 + half[6 * i + 5]
        b = half[6 * i + 1] * 8 + half[6 * i + 2] * 4 + half[6 * i + 3] * 2 + half[6 * i + 4]
        result = result + st[i][a * 16 + b]
    s = list(hex(result))
    s.pop(0)
    s.pop(0)
    for i in range(8 - len(s)):
        s.insert(0,'0')
    ans = XtoB(s[0]) + XtoB(s[1]) + XtoB(s[2]) + XtoB(s[3]) + XtoB(s[4]) + XtoB(s[5]) + XtoB(s[6]) + XtoB(s[7])
    return ans
def encrypt(plaintext,roundKey):
    for k in range(1):
        message = swap(plaintext)
        L = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
        R = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
        L[0] = message[0:32]
        R[0] = message[32:64]
        for i in range(1,17):
            L[i] = R[i-1]
            R[i] = xor(L[i-1],f(R[i-1],roundKey[i-1]))
        afterF = R[16]+L[16]
        plaintext = Invswap(afterF)
    return plaintext
def decrypt(ciphertext,roundKey):
    for k in range(1):
        message = swap(ciphertext)
        L = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
        R = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
        R[16] = message[0:32]
        L[16] = message[32:64]
        for i in range(16, 0,-1):
            L[i-1] =xor(R[i], f(L[i], roundKey[i - 1]))
            R[i-1] = L[i]
            # test(L[i]+R[i])
        afterF = L[0] + R[0]
        ciphertext = Invswap(afterF)
    return ciphertext
def EDE(k1,k2,s):
    mes = encrypt(s,k1)
    message = decrypt(mes,k2)
    text = encrypt(message,k1)
    return text
def ANSI(k1,k2,R,V,DT,n):
    key1 = generatekey(k1)
    key2 = generatekey(k2)
    for i in range(n):
        a=EDE(key1,key2,DT[i])
        R.append(EDE(key1,key2,xor(V[i],a)))
        V.append(EDE(key1,key2,xor(R[i],a)))
        test(R[i])
if __name__ == '__main__':
    IV = char_to_int(list("{:064b}".format(int(input().strip(), 16))))
    k1 = char_to_int(list("{:064b}".format(int(input().strip(), 16))))
    k2 = char_to_int(list("{:064b}".format(int(input().strip(), 16))))
    n = int(input())
    V = [IV]
    DT = []
    R = []
    for i in range(n):
        s = char_to_int(list("{:064b}".format(int(input().strip(), 16))))
        DT.append(s)
    ANSI(k1, k2, R, V, DT, n)